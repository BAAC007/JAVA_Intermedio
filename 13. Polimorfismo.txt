#Polimorfismo, que se refiere a la idea de "tener muchas formas", ocurre cuando hay una jerarquía de clases relacionadas entre sí a través de la herencia.

Una llamada a un método de miembro provocará que se ejecute una implementación diferente, dependiendo del tipo del objeto que invoca el método.

Aquí hay un ejemplo: Dog y Cat son clases que heredan de la clase Animal . Cada clase tiene su propia implementación del método makeSound().

ejemplo: 

class Animal {
  public void makeSound() {
    System.out.println("Grr...");
  }
}
class Cat extends Animal {
  public void makeSound() {
    System.out.println("Meow");
  }
}
class Dog extends Animal {
  public void makeSound() {
    System.out.println("Woof");
  }
}

#Como todos los objetos Cat y Dog son objetos Animal, podemos hacer lo siguiente en main:

public static void main(String[ ] args) {
  Animal a = new Dog();
  Animal b = new Cat();
}

#Hemos creado dos variables de referencia de tipo Animal, y las hemos dirigido a los objetos Cat y Dog .

Ahora, podemos llamar a los métodos makeSound().

ejemplo:

class Animal {
  public void makeSound() {
    System.out.println("Grr...");
  }
}
class Cat extends Animal {
  public void makeSound() {
    System.out.println("Meow");
  }
}
class Dog extends Animal {
  public void makeSound() {
    System.out.println("Woof");
  }
}
 class kangaroo extends Animal{
	public void makeSound(){
		System.out.println("Double kick");
	}
}

public class Program{
	public static void main(String[ ] args) {
  		Animal a = new Dog();
  		Animal b = new Cat();

		
		a.makeSound();
		b.makeSound();
		c.makeSound();
	}
}


