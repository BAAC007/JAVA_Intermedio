#Formatter, otra clase útil en el paquete java.util, se utiliza para crear contenido y escribirlo en archivos.

Ejemplo:

import java.util.Formatter;

public class MyClass {
   public static void main(String[ ] args) {
  try {
    Formatter f = new Formatter("C:\\sololearn\\test.txt");
  } catch (Exception e) {
      System.out.println("Error");
  }
  }
}

#Esto crea un archivo vacío en la ruta especificada. Si el archivo ya existe, esto lo sobrescribirá.

Otra vez, necesitas rodear el código con un bloque try/catch, ya que la operación puede fallar.

#Una vez que el archivo es creado, puedes escribir contenido en él usando el mismo objeto Formatter y su método <b>format()</b>.

Ejemplo:

import java.io.File;
import java.util.Scanner;
import java.util.Formatter;

public class MyClass{
	public static void main(String[] args){
		try{
			Formatter f = new Formatter("test.txt");
			f.format("%s %s %s", "1","Jhon","Smith \r\n");
			f.format("%s %s %s", "2","Amy","Brown");
			f.close();
			
			File x = new File("test.txt");
			Scanner sc = new Scanner(x);
			while(sc.hasNext()){
				System.out.println(sc.next());
			}
			sc.close();
		} catch (Exception e){
		System.out.println("Error");
		}
	}
}

#El método <b>format()</b> formatea sus parámetros de acuerdo con su primer parámetro.

%s significa una cadena y se sustituye por el primer parámetro después del formato. El segundo %s se sustituye por el siguiente, y así sucesivamente. Por lo tanto, el formato %s %s %s denota tres cadenas que están separadas por espacios.

Nota: \r\n es el símbolo de nueva línea en Windows.

El código anterior crea un archivo con el siguiente contenido:

1 John Smith
2 Amy Brown

No olvides cerrar el archivo una vez que hayas terminado de escribir en él!



