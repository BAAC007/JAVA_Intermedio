#Java es un lenguaje de programación multi-hilo. Esto significa que nuestro programa puede hacer un uso óptimo de los recursos disponibles ejecutando dos o más componentes concurrentemente, con cada componente manejando una tarea diferente.

Puede subdividir operaciones específicas dentro de una sola aplicación en hilos individuales que se ejecutan en paralelo.

El siguiente diagrama muestra el ciclo de vida de un hilo.


New thread()--> New--> Start()--> Runnable--> run()--> Running--> waiting--> Sleep(), wait()--> Dead "End of execution"
                                                          I                                       ^
                                                          -----------------------------------------

#Hay dos formas de crear un hilo.

1. Extender la clase Thread

Heredar de la clase <b>Thread</b>, sobrescribir su método run(), y escribir la funcionalidad del hilo en el método run().

Luego creas un nuevo objeto de tu clase y llamas a su método <b>start()</b> para ejecutar el hilo.

Ejemplo:

class loader extends Thread{
	public void run(){
		System.out.pritnln("Hello");
	}
}

class MyClass{
	public static void main(String[] arg){
		Loader obj = new Loader();
		obj.star();
	}
}

#Como puedes ver, nuestra clase Loader extiende la clase Thread y sobre escribe su método run().

Cuando creamos el objeto obj y llamamos a su método start(), las declaraciones del método run() se ejecutan en un hilo diferente.


#La otra forma de crear Hilos es implementando la interfaz Runnable.

Implementa el método run(). Luego, crea un nuevo objeto Thread, pasa la clase Runnable a su constructor y comienza el Hilo llamando al método start().

Ejemplo:

class Loader implements Runnable{
	public void run(){
		System.out.println("Hello");
	}
}

class MyClass{
	public static void main(String[] args){
		Thread t = new Thread(new loader());
		t.start();
	}
}
	




